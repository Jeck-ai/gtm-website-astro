---
---

<div id="text-effect-container" class="w-full h-[424px] bg-gray-100"></div>

<!-- Import Three.js from CDN -->
<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>

<!-- Necessary modules for text creation -->
<script is:inline src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/FontLoader.js"></script>
<script is:inline src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/geometries/TextGeometry.js"></script>

<script is:inline>
  // Initialize after everything is loaded
  window.addEventListener('load', function() {
    const container = document.getElementById('text-effect-container');
    if (!container) return;
    
    // Scene variables
    let scene, camera, renderer, textMesh;
    
    // Initialize Three.js scene
    function init() {
      // Create scene
      scene = new THREE.Scene();
      
      // Set up camera
      const width = container.clientWidth;
      const height = container.clientHeight;
      camera = new THREE.PerspectiveCamera(75, width/height, 0.1, 1000);
      camera.position.set(0, 0, 60);
      
      // Set up renderer
      renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
      renderer.setSize(width, height);
      renderer.setClearColor(0x000000, 0); // Transparent background
      container.appendChild(renderer.domElement);
      
      // Add lighting
      const light = new THREE.DirectionalLight(0xffffff, 1);
      light.position.set(1, 1, 1).normalize();
      scene.add(light);
      
      const ambientLight = new THREE.AmbientLight(0x404040, 0.5);
      scene.add(ambientLight);
      
      // Handle window resizing
      window.addEventListener('resize', () => {
        const newWidth = container.clientWidth;
        const newHeight = container.clientHeight;
        camera.aspect = newWidth / newHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(newWidth, newHeight);
      });
    }

    function createText(font) {
      if (textMesh) scene.remove(textMesh);
      
      // Generate random color with good contrast
      const hue = Math.random();
      const saturation = 0.7 + Math.random() * 0.3; // High saturation
      const lightness = 0.5 + Math.random() * 0.2; // Medium-high lightness
      const color = new THREE.Color().setHSL(hue, saturation, lightness);
      
      // Create text geometry
      const geometry = new THREE.TextGeometry('GTM Ventures', {
        font: font,
        size: 7,
        height: 2.5,
        curveSegments: 12,
        bevelEnabled: true,
        bevelThickness: 0.5,
        bevelSize: 0.3,
        bevelSegments: 5
      });
      
      // Center the text
      geometry.computeBoundingBox();
      const centerOffset = -0.5 * (geometry.boundingBox.max.x - geometry.boundingBox.min.x);
      geometry.translate(centerOffset, 0, 0);
      
      // Create material with random properties
      const material = new THREE.MeshPhongMaterial({ 
        color: color,
        specular: 0xffffff,
        shininess: 30 + Math.random() * 70,
        emissive: new THREE.Color().setHSL(hue, saturation * 0.3, lightness * 0.1)
      });
      
      // Create mesh and add to scene
      textMesh = new THREE.Mesh(geometry, material);
      scene.add(textMesh);
      
      // Set random initial rotation
      textMesh.rotation.x = Math.random() * 0.2 - 0.1;
      textMesh.rotation.y = Math.random() * 0.3 - 0.15;
    }

    function explodeText(font) {
      if (!textMesh) return;
      
      const duration = 3000; 
      const start = Date.now();
      
      // Clone geometry to manipulate vertices
      const geometry = textMesh.geometry.clone();
      const positions = geometry.attributes.position;
      const initialPositions = Array.from(positions.array);
      textMesh.geometry = geometry;
      
      // Create random destination vectors for each vertex
      const randomVectors = [];
      for (let i = 0; i < positions.count; i++) {
        const swirl = Math.random() * 2 * Math.PI;
        const distance = 20 + Math.random() * 60;
        
        randomVectors.push({
          x: Math.cos(swirl) * distance,
          y: Math.sin(swirl) * distance,
          z: (Math.random() - 0.5) * 80
        });
      }
      
      function animateExplosion() {
        const elapsed = Date.now() - start;
        const t = Math.min(elapsed / duration, 1);
        
        // Use easing function for smoother animation
        const easeT = t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
        
        // Update vertex positions
        for (let i = 0; i < positions.count; i++) {
          const initialX = initialPositions[i * 3];
          const initialY = initialPositions[i * 3 + 1];
          const initialZ = initialPositions[i * 3 + 2];
          
          positions.setXYZ(
            i,
            initialX + randomVectors[i].x * easeT,
            initialY + randomVectors[i].y * easeT,
            initialZ + randomVectors[i].z * easeT
          );
        }
        
        positions.needsUpdate = true;
        
        if (t < 1) {
          requestAnimationFrame(animateExplosion);
        } else {
          // After explosion completes, wait a bit and create new text
          setTimeout(() => createText(font), 1000);
        }
      }
      
      animateExplosion();
    }

    function animate() {
      requestAnimationFrame(animate);
      if(textMesh) {
        // Rotate text continuously
        textMesh.rotation.y += 0.01;
        textMesh.rotation.x = Math.sin(Date.now() * 0.001) * 0.1;
      }
      renderer.render(scene, camera);
    }

    function loadText() {
      const loader = new THREE.FontLoader();
      loader.load('https://threejs.org/examples/fonts/helvetiker_bold.typeface.json', (font) => {
        createText(font);
        // Start explosion cycle after initial delay
        setTimeout(() => {
          setInterval(() => explodeText(font), 8000);
        }, 3000);
      });
    }

    // Initialize Three.js scene
    init();
    
    // Load and create 3D text
    loadText();
    
    // Start animation loop
    animate();
  });
</script>
