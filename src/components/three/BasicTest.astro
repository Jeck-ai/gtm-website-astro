---
---
<div id="basic-test-container" class="fixed top-0 left-0 w-full h-full overflow-hidden" style="z-index: -10;"></div>

<script>
  // Try to import Three.js
  import('three').then(THREE => {
    
    // Create simple scene
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0x000000);
    scene.background.alpha = 0.5;
    
    // Camera
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.z = 15;
    
    // Renderer
    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setClearColor(0x000000, 0);
    
    // Add to DOM
    const container = document.getElementById('basic-test-container');
    if (container) {
      container.appendChild(renderer.domElement);
    }
    
    // Create a group to hold all objects
    const group = new THREE.Group();
    scene.add(group);
    
    // Create multiple cubes with different colors and sizes
    const colors = [0x3B82F6, 0x10B981, 0x6366F1, 0xf59e0b, 0xef4444];
    
    for (let i = 0; i < 50; i++) {
      const size = Math.random() * 0.5 + 0.1;
      const geometry = new THREE.BoxGeometry(size, size, size);
      const material = new THREE.MeshBasicMaterial({ 
        color: colors[Math.floor(Math.random() * colors.length)],
        transparent: true,
        opacity: 0.7 
      });
      
      const cube = new THREE.Mesh(geometry, material);
      
      // Position cubes randomly in a sphere-like shape
      const radius = 8;
      const theta = Math.random() * Math.PI * 2;
      const phi = Math.random() * Math.PI;
      
      cube.position.x = radius * Math.sin(phi) * Math.cos(theta);
      cube.position.y = radius * Math.sin(phi) * Math.sin(theta);
      cube.position.z = radius * Math.cos(phi);
      
      // Random rotation
      cube.rotation.x = Math.random() * Math.PI;
      cube.rotation.y = Math.random() * Math.PI;
      
      // Add to group
      group.add(cube);
    }
    
    // Mouse tracking
    let mouseX = 0;
    let mouseY = 0;
    
    document.addEventListener('mousemove', (event) => {
      mouseX = (event.clientX / window.innerWidth) * 2 - 1;
      mouseY = -(event.clientY / window.innerHeight) * 2 + 1;
    });
    
    // Handle resize
    window.addEventListener('resize', () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });
    
    // Animation
    function animate() {
      requestAnimationFrame(animate);
      
      // Rotate the whole group
      group.rotation.y += 0.005;
      group.rotation.x += 0.002;
      
      // Add subtle movement based on mouse position
      group.rotation.y += mouseX * 0.001;
      group.rotation.x += mouseY * 0.001;
      
      // Animate individual cubes
      group.children.forEach((cube, i) => {
        cube.rotation.x += 0.01 * (i % 3 + 1) * 0.01;
        cube.rotation.y += 0.01 * (i % 2 + 1) * 0.01;
      });
      
      renderer.render(scene, camera);
    }
    
    animate();
    
  }).catch(err => {
    // Error handling silenced
  });
</script>
