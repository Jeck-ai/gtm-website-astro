---
import { isWebGLAvailable, createRenderer, setupResizeHandler, setupMouseTracking, clearContainer } from './three-utils';
---
<div id="three-container" class="fixed top-0 left-0 w-full h-full overflow-hidden" style="z-index: -10;"></div>

<script>
  import { isWebGLAvailable, createRenderer, setupResizeHandler, setupMouseTracking, clearContainer } from './three-utils';
  import * as THREE from 'three';

  // Constants for the effect
  const SEPARATION = 60;
  const AMOUNTX = 40;
  const AMOUNTY = 40;

  function initAdvancedEffect() {
    if (!isWebGLAvailable()) {
      console.warn('WebGL not supported');
      const container = document.getElementById('three-container');
      if (container) container.style.display = 'none';
      return;
    }

    const container = document.getElementById('three-container');
    if (!container) {
      console.error('Container not found');
      return;
    }

    clearContainer(container);

    // Scene setup
    const scene = new THREE.Scene();
    scene.fog = new THREE.FogExp2(0x050510, 0.0007);

    // Camera setup
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 10000);
    camera.position.z = 1000;

    // Create renderer with specific settings for this effect
    const renderer = createRenderer(window.innerWidth, window.innerHeight);
    renderer.setClearColor(0x050510, 0.3); // Semi-transparent dark background
    container.appendChild(renderer.domElement);

    // Create particles
    const numParticles = AMOUNTX * AMOUNTY;
    const positions = new Float32Array(numParticles * 3);
    const scales = new Float32Array(numParticles);

    let i = 0, j = 0;

    for (let ix = 0; ix < AMOUNTX; ix++) {
      for (let iy = 0; iy < AMOUNTY; iy++) {
        positions[i] = ix * SEPARATION - ((AMOUNTX * SEPARATION) / 2);
        positions[i + 1] = 0;
        positions[i + 2] = iy * SEPARATION - ((AMOUNTY * SEPARATION) / 2);
        scales[j] = 1;
        i += 3;
        j++;
      }
    }

    const geometry = new THREE.BufferGeometry();
    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
    geometry.setAttribute('scale', new THREE.BufferAttribute(scales, 1));

    // Material with custom shaders
    const material = new THREE.ShaderMaterial({
      uniforms: {
        time: { value: 0 }
      },
      vertexShader: `
        attribute float scale;
        uniform float time;
        
        varying float vTime;
        
        void main() {
          vTime = time;
          vec3 pos = position;
          
          // Simplified wave pattern
          pos.y = sin(time * 0.1 + (pos.x + pos.z) * 0.01) * 100.0;
          
          vec4 mvPosition = modelViewMatrix * vec4(pos, 1.0);
          
          // Simplified point sizing
          gl_PointSize = scale * (300.0 / -mvPosition.z);
          gl_Position = projectionMatrix * mvPosition;
        }
      `,
      fragmentShader: `
        varying float vTime;
        
        void main() {
          // Simple circular point
          vec2 center = vec2(0.5, 0.5);
          float dist = length(gl_PointCoord - center);
          
          // Discard pixels outside the circle
          if (dist > 0.5) discard;
          
          // Simple blue color
          vec3 color = vec3(0.12, 0.51, 0.96);
          gl_FragColor = vec4(color, 0.7);
        }
      `,
      blending: THREE.AdditiveBlending,
      depthTest: false,
      transparent: true
    });

    const particles = new THREE.Points(geometry, material);
    scene.add(particles);

    // Setup mouse tracking
    const mouseTracker = setupMouseTracking();
    
    // Setup resize handler
    setupResizeHandler(camera, renderer, container);

    // Handle scroll
    function onScroll() {
      const scrollY = window.scrollY;
      const maxScroll = document.body.scrollHeight - window.innerHeight;
      const scrollRatio = scrollY / maxScroll;
      scene.rotation.x = scrollRatio * -0.3;
    }
    window.addEventListener('scroll', onScroll);

    // Animation
    let count = 0;
    function animate() {
      requestAnimationFrame(animate);

      // Update time for shaders
      particles.material.uniforms.time.value = count;

      // Get mouse position
      const mouseX = mouseTracker.getMouseX();
      const mouseY = mouseTracker.getMouseY();

      // Update camera position based on mouse
      camera.position.x += (mouseX * 0.5 - camera.position.x) * 0.05;
      camera.position.y += (-mouseY * 0.5 - camera.position.y + 200) * 0.05;
      camera.lookAt(scene.position);

      // Update wave animation
      const positions = particles.geometry.attributes.position.array;
      const scales = particles.geometry.attributes.scale.array;

      let i = 0, j = 0;

      for (let ix = 0; ix < AMOUNTX; ix++) {
        for (let iy = 0; iy < AMOUNTY; iy++) {
          positions[i + 1] = (Math.sin((ix + count) * 0.3) * 50) + 
                            (Math.sin((iy + count) * 0.5) * 50);
          
          scales[j] = (Math.sin((ix + count) * 0.3) + 1) * 8 + 
                     (Math.sin((iy + count) * 0.5) + 1) * 8;

          i += 3;
          j++;
        }
      }

      particles.geometry.attributes.position.needsUpdate = true;
      particles.geometry.attributes.scale.needsUpdate = true;

      renderer.render(scene, camera);

      count += 0.1;
    }

    animate();
  }

  // Initialize immediately
  initAdvancedEffect();

  // Also handle window load event as a fallback
  window.addEventListener('load', () => {
    if (!document.querySelector('#three-container canvas')) {
      initAdvancedEffect();
    }
  });
</script>

<style>
  #three-container {
    position: fixed;
    z-index: -1;
    pointer-events: none;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    overflow: hidden;
  }
</style>
